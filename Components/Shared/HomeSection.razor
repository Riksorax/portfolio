@using System.Text.Json.Serialization
<section id="home" class="hero">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-12 col-lg-8">
                <h1>Hallo, ich bin <span class="text-primary">Frank Speulmans</span></h1>
                <h2>Software Developer</h2>
                <p>Ich entwickle elegante Lösungen für komplexe Probleme und setze Ideen in funktionalen Code um.</p>
                <div class="d-flex">
                    <a href="javascript:void(0);" @onclick='() => NavigateToSection("projects")' class="btn btn-primary mr-3">Meine Projekte</a>
                    <a href="javascript:void(0);" @onclick='() => NavigateToSection("contact")' class="btn btn-outline" style="margin-left: 1rem;">Kontakt</a>
                </div>
            </div>
            <div class="col-12 col-lg-4 text-center mt-5 mt-lg-0">
                <div style="position: relative; width: 250px; height: 250px; margin: 0 auto;">
                    <div style="position: absolute; width: 100%; height: 100%; background-color: var(--primary); border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%; opacity: 0.1; transform: rotate(-15deg);"></div>
                    <div style="position: absolute; width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;">
                        <i class="fas fa-code" style="font-size: 5rem; color: var(--primary);"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code
{
    [Inject]
    public IJSRuntime JsRuntime { get; set; } = null!;
    
    [Inject]
    public ILogger<HomeSection> Logger { get; set; } = null!;
    
    private string _activeNavLink = "home";
    
    // --- State for Navbar ---
    private bool _isNavbarCollapsed = true;
    
    private ElementReference _navbarElement;
    
    // --- State for JS Interop ---
    // Referenz zum geladenen JavaScript-Modul (für Isolation)
    private IJSObjectReference? _module;
    private bool _moduleLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./app.ts");
                _moduleLoaded = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fehler beim Laden des JS-Moduls.");
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    
    // Wird durch @onclick="() => NavigateToSection(...)" in Home.razor ausgelöst
    private async Task NavigateToSection(string sectionId)
    {
        if (!_isNavbarCollapsed)
        {
            _isNavbarCollapsed = true;
        }

        _activeNavLink = sectionId;
        StateHasChanged(); // UI sofort aktualisieren

        // Rufen Sie die scrollToSection Funktion INNERHALB des geladenen Moduls auf
        // Verwenden Sie module. InvokeVoidAsync, NICHT JsRuntime. InvokeVoidAsync global
        if (_module != null) // Prüfen, ob Modul geladen wurde
        {
            var navbarHeight = 0;
            // Erneut die Höhe holen, idealerweise mit der Funktion aus dem Modul
            if (_navbarElement.Id != null)
            {
                // Rufen Sie die Funktion getElementBoundingClientRect INNERHALB des geladenen Moduls auf
                var rect = await _module.InvokeAsync<BoundingClientRect>("getElementBoundingClientRect", _navbarElement);
                navbarHeight = (int)rect.Height;
            } else {
                // Fallback-Aufruf, falls ElementReference fehlschlägt
                navbarHeight = await JsRuntime.InvokeAsync<int>("eval", "document.querySelector('.navbar').offsetHeight");
            }

            // Rufen Sie die Funktion scrollToSection INNERHALB des geladenen Moduls auf
            await _module.InvokeVoidAsync("scrollToSection", sectionId, navbarHeight);
        } else {
            Logger.LogError("JS-Modul nicht geladen, kann nicht scrollen."); // Optional
            // Fallback: Standard-Link-Verhalten zulassen oder Fehlermeldung anzeigen
        }
    }
    
    // --- JS Interop Helper DTO ---
    public class BoundingClientRect
    {
        [JsonPropertyName("height")]
        public double Height { get; init; }
    }
}
